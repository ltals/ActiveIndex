---
title: "EDGAR"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(httr)
library(jsonlite)
library(data.table)

#edgar downloads files locally
#finreportr gives 403; attemping to debug. Likely approach is manual func's, see below
# elements from finreportr GAAP parsing will be leveraged


# def user agent to prevent 403
agent <- "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"



# get list of padded CIKs + tickers
getCIK_df <- function(){
  tickerGet <- GET("https://www.sec.gov/files/company_tickers.json", 
               user_agent(agent))
  
  tickrDf <- content(tickerGet, "text", encoding="UTF-8") %>% 
  fromJSON() %>% 
    map_dfr(~as_tibble(.x)) %>% 
    mutate(cik_str = str_pad(cik_str, 10, pad = "0"))
  
  
  return(tickrDf)
}


tickrDf <- getCIK_df()


# get padded CIK for desired ticker
getCIK = function(symbol){
  #requires df generated in getCIK_df
  subset(tickrDf, tickrDf$ticker == paste(symbol))$cik_str
}



GAAPedgar <- function(rawPage){
  
  rawData <- content(rawPage, "text", encoding="UTF-8") %>% 
    fromJSON(., rawPage, flatten=FALSE)   
  
  n = length(rawData$facts$'us-gaap')
  
  # code still somewhat voodoo, review at https://github.com/jgQuantScripts/SEC-API-1
  rbindlist(lapply(as.list(1:n), function(ii){
    gaap <- as.data.frame(rbindlist(rawData$facts$'us-gaap'[[ii]]$units[[1]],
                                  use.names = TRUE,
                                  fill = TRUE))
    gaap$desc <- names(rawData$facts$'us-gaap')[ii]
    gaap <- gaap[!duplicated(gaap$end),]
    gaap$cik <- rawData[['cik']]
    return(gaap)
    }
    ), use.names=TRUE, fill=TRUE)
}


DEIedgar <- function(rawPage){
  
  rawData <- content(rawPage, "text", encoding="UTF-8") %>% 
    fromJSON(., rawPage, flatten=FALSE)   
  
  n = length(rawData$facts$dei)
  
   if (n == 0) {
    return(NULL)
  }
  
  rbindlist(lapply(as.list(1:n), function(ii){
    dei <- as.data.frame(rbindlist(rawData$facts$dei[[ii]]$units[[1]],
                                  use.names = TRUE,
                                  fill = TRUE))
    dei$desc <- names(rawData$facts$dei)[ii]
    dei <- dei[!duplicated(dei$end),]
    dei$cik <- rawData[['cik']]
    return(dei)
    }
    ), use.names=TRUE, fill=TRUE)
}


INVESTedgar <- function(rawPage){
  
  rawData <- content(rawPage, "text", encoding="UTF-8") %>% 
    fromJSON(., rawPage, flatten=FALSE)   
  
  n = length(rawData$facts$invest)
  
   if (n == 0) {
    return(NULL)
  }
  
  rbindlist(lapply(as.list(1:n), function(ii){
    invest <- as.data.frame(rbindlist(rawData$facts$invest[[ii]]$units[[1]],
                                  use.names = TRUE,
                                  fill = TRUE))
    invest$desc <- names(rawData$facts$invest)[ii]
    invest <- invest[!duplicated(invest$end),]
    invest$cik <- rawData[['cik']]
    return(invest)
    }
    ), use.names=TRUE, fill=TRUE)
}


SRTedgar <- function(rawPage){
  
  rawData <- content(rawPage, "text", encoding="UTF-8") %>% 
    fromJSON(., rawPage, flatten=FALSE)   
  
  n = length(rawData$facts$srt)
  
   if (n == 0) {
    return(NULL)
   }
}


IFRSedgar <- function(rawPage){
  
  rawData <- content(rawPage, "text", encoding="UTF-8") %>% 
    fromJSON(., rawPage, flatten=FALSE)   
  
  n = length(rawData$facts$srt)
  
   if (n == 0) {
    return(NULL)
  }
  
  rbindlist(lapply(as.list(1:n), function(ii){
    ifrs <- as.data.frame(rbindlist(rawData$facts$'ifrs-full'[[ii]]$units[[1]],
                                  use.names = TRUE,
                                  fill = TRUE))
    ifrs$desc <- names(rawData$facts$'ifrs-full')[ii]
    ifrs <- ifrs[!duplicated(ifrs$end),]
    ifrs$cik <- rawData[['cik']]
    return(ifrs)
    }
    ), use.names=TRUE, fill=TRUE)
}

FULLedgar <- function(ticker){
  rawPage <- GET(url = paste0("https://data.sec.gov/api/xbrl/companyfacts/CIK",
                              getCIK(ticker),
                              ".json"),
            add_headers(`User-Agent` = agent))
 
 gaap <- GAAPedgar(rawPage)
  
    if (!is.null(gaap)) {
     gaap <- gaap %>% mutate(start = NA,
                          from = 'gaap')
  }

  dei <- DEIedgar(rawPage)
  
  if (!is.null(dei)) {
    dei <- dei %>% mutate(start = NA,
                          from = 'dei')
  }
  
  invest <- INVESTedgar(rawPage)
  if (!is.null(invest)) {
    invest <- invest %>% mutate(start = NA,
                                from = 'invest')
  }

  
  return(rbind(gaap, dei, invest))
}

pgAAPL <- GET(url = paste0("https://data.sec.gov/api/xbrl/companyfacts/CIK", getCIK("AAPL"),".json"),
            add_headers(`User-Agent` = agent))

pgTSLA <- GET(url = paste0("https://data.sec.gov/api/xbrl/companyfacts/CIK", getCIK("TSLA"),".json"),
            add_headers(`User-Agent` = agent))

pgBRK <- GET(url = paste0("https://data.sec.gov/api/xbrl/companyfacts/CIK", getCIK("BRK-B"),".json"),
            add_headers(`User-Agent` = agent))

pgUBER <- GET(url = paste0("https://data.sec.gov/api/xbrl/companyfacts/CIK", getCIK("UBER"),".json"),
            add_headers(`User-Agent` = agent))




FULLedgar("TSM")

slice <- tickrDf %>% 
  slice(1:100) %>% 
  filter(!ticker %in% c("TSM", "NVO"))

  
tickerList <- as.list(slice$ticker)


tickerList <- as.list(RTLedu::sp500_desc %>% 
                        slice(1:100)
                    
top100s <- RTLedu::sp500_desc %>%
  slice(1:100) 

tickerList <- as.list(top100s$symbol)

top100 <- data.frame()
for(ticker in tickerList) {
  df <- FULLedgar(ticker)
  top100 <- rbind(top100, df)
  Sys.sleep(1)
  }

unique(top100$cik)
df <- FULLedgar(tickerList[1])


tickerList

tickrDf


for(i in tickerList) {
  print(i)
}


72971

top100 <- data.frame(top100)

write_csv(top100, '37sp500components.csv')



```
```{r}
library(XBRL)

xbrl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"


test <- GET("https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml", 
               user_agent(agent))  

xbrl_data <- xbrlDoAll("https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml")


print(xbrl_data)


unique(top100$cik)



tenK <- top100 %>% 
  filter(form == "10-K") %>% 
  filter(desc == "AssetsCurrent",
         )

unique(tenK$desc)

unique(tenK$cik)
# key ratios
# current assets/current liablties
```

